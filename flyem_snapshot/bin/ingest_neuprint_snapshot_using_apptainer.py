"""
Ingest a neuprint snapshot export (a set of CSV files) into
a neo4j database using apptainer to launch the neo4j container.
(This Python script is a thin wrapper around a bash script.)

Usage:

    ingest-neuprint-snapshot-using-apptainer <snapshot-dir>

"""
import os
import sys
import getpass
import argparse
import subprocess
from pathlib import Path

import flyem_snapshot


def main():
    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter
    )
    parser.add_argument(
        'snapshot_dir',
        help='The snapshot export directory as generated by flyem-snapshot. '
             'It should contain a "neuprint" subdirectory.'
    )
    parser.add_argument(
        '--scratch-dir',
        default='/scratch',
        help='The database files are constructed in a local scratch directory, then copied into the snapshot_dir. '
             'You should override this here if /scratch does not exist on your machine.'
    )
    parser.add_argument(
        '--debug-shell', action='store_true',
        help='If given, launch a bash shell inside the container instead of launching the full ingestion script.'
    )
    args = parser.parse_args()

    package_dir = os.path.dirname(flyem_snapshot.__file__)
    package_dir = os.path.abspath(package_dir)
    script = f"{package_dir}/outputs/neuprint/scripts/ingest-neuprint-snapshot-using-apptainer.sh"

    script_args = [script, args.snapshot_dir]

    if args.debug_shell:
        script_args += ['--debug-shell']

    if args.scratch_dir:
        snapshot_name = Path(args.snapshot_dir).name
        os.environ['WORKSPACE_DIR'] = f"{args.scratch_dir}/{getpass.getuser()}/{snapshot_name}/neo4j"

    p = subprocess.run(script_args, check=False)
    sys.exit(p.returncode)


if __name__ == "__main__":
    main()
